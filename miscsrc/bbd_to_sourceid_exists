#!/usr/bin/perl -w
# -*- perl -*-

#
# Author: Slaven Rezic
#
# Copyright (C) 2013,2025 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# WWW:  https://github.com/eserte/bbbike
#

use strict;
use warnings;
use Getopt::Long;

use constant HANDLE_MULTIPLE_IDS => 1;

sub usage (;$) {
    my $msg = shift;
    warn $msg, "\n" if $msg;
    die <<EOF;
usage: $0 [--inactive] files
EOF
}

GetOptions("inactive" => \my $inactive)
    or usage;

my @infiles = @ARGV
    or usage "bbd file is missing (one or more)";
bbd_to_sourceid_exists({inactive => $inactive}, @infiles);

sub bbd_to_sourceid_exists {
    my($opts, @infiles) = @_;

    my $inactive = delete $opts->{inactive};
    usage "Unhandled options: " . join(" ", %$opts) if %$opts;

    _add_bbbike_inc();
    require Strassen::Core;
    require BBBikeYAML;

    my %existsid;
    for my $infile (@infiles) {
	Strassen->new_stream($infile)->read_stream
	    (sub {
		 my(undef, $dir) = @_;
		 for my $source_id (@{ $dir->{source_id} || [] }) {
		     my $is_inactive;
		     if ($inactive) {
			 next if $source_id !~ m{\binaktiv\)\s*$};
		     }
		     if (HANDLE_MULTIPLE_IDS) {
			 my @id_candidates = split /\s+/, $source_id;
			 for my $id_candidate (@id_candidates) {
			     last if $id_candidate =~ /^\(/; # looks like a comment, stop at this point
			     $existsid{$id_candidate} = 1;
			 }
		     } else {
			 # traditional
			 # Use only first token from source id
			 $source_id =~ s{^(\S+).*}{$1};
			 $existsid{$source_id} = 1;
		     }
		 }
	     });
    }
    print BBBikeYAML::Dump(\%existsid);
}

sub _add_bbbike_inc {
    require lib;
    require FindBin;
    lib->import("$FindBin::RealBin/..", "$FindBin::RealBin/../lib");
}
