#!/usr/bin/env perl
# -*- perl -*-

#
# Author: Slaven Rezic
#
# Copyright (C) 2023,2024 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use warnings;
use FindBin;
use lib ("$FindBin::RealBin/..", "$FindBin::RealBin/../lib");
use utf8;

use Encode qw(decode);
use File::Glob qw(bsd_glob);
use Getopt::Long;
use I18N::Langinfo qw(langinfo CODESET);

use BBBikeUtil qw(bbbike_root bbbike_aux_dir);
use Strassen::Core;

our $VERSION = '0.02';

my $bbbike_datadir = bbbike_root . '/data';
my $bbbike_aux_datadir = defined bbbike_aux_dir() ? bbbike_aux_dir() . '/bbd' : undef;

my $codeset = langinfo(CODESET());
$codeset = lc $codeset; # 'UTF-8' is not recognized by emacs, but 'utf-8' is
binmode STDOUT, ":encoding($codeset)";
binmode STDERR, ":encoding($codeset)";
$_ = decode($codeset, $_) for @ARGV;

# XXX should be configurable, by using both filesets and files
# element type:
# - either filename
# - or hashref with filename and encoding as fields
my @search_file_defs = (
			bsd_glob("$bbbike_datadir/*-orig"),
			(map { +{ encoding => 'iso-8859-1', filename => $_ } }
			 bsd_glob("$bbbike_datadir/*.coords.data"), "$bbbike_datadir/temp_blockings/bbbike-temp-blockings.pl",
			),
			"$bbbike_datadir/mudways",
			"$bbbike_datadir/zebrastreifen",
			(defined $bbbike_aux_datadir ? 
			 ("$bbbike_aux_datadir/fragezeichen_lowprio.bbd") : ()
			),
		       );

my $searchterm_type = 'fixed';
my $case_insens     = 1;
my $limit;

my $with_line_number;

my $debug;
sub debug ($) { warn "$_[0]\n" if $debug }

Getopt::Long::Configure('noignore_case', 'noauto_abbrev', 'auto_version', 'auto_help');
GetOptions(
	   'rx|regex|regexp'       => sub { $searchterm_type = 'rx' },
	   'fixed'                 => sub { $searchterm_type = 'fixed' },
	   'case|case-sensitive|I' => sub { $case_insens = 0 },
	   'n|line-number'         => \$with_line_number,
	   'limit=i'               => \$limit,
	   'add-file=s'            => sub { push @search_file_defs, $_[1] },
	   'add-file-with-encoding=s' => sub {
	       if (my($filename, $encoding) = $_[1] =~ m{^(.*):(.*)$}) {
		   push @search_file_defs, {
		       filename => $filename,
		       encoding => $encoding,
		   };
	       } else {
		   die "Unexpected format for --add-file-with-encoding value '$_[1]', should be 'filename:encoding'.\n";
	       }
	   },
	   'reldir=s'              => \my $reldir,
	   'debug'                 => \$debug,
	  )
    or die "usage?";

# XXX allow multiple search terms? do or/and searches?
my $searchterm = shift
    or die "usage? searchterm missing";
my $original_searchterm = $searchterm;

if ($searchterm_type eq 'fixed') {
    $searchterm = quotemeta($searchterm);
}
# maybe do this conditional/with option?
# str. <-> straße
$searchterm =~ s{(?<=[sS]tr)\\\.}{(\\.|aße)}g;
$searchterm =~ s{(?<=[sS]tr)aße}{(\\.|aße)}g;
if ($searchterm ne $original_searchterm) {
    debug "searchterm was changed from '$original_searchterm' to '$searchterm'";
}
my $search_rx = $case_insens ? qr{$searchterm}i : qr{$searchterm};

if ($reldir) {
    require File::Spec;
}

debug "search $searchterm (case " . ($case_insens ? "in" : "") . "sensitive) ($searchterm_type)...";
my $errors = 0;
my $hits = 0;
my $file_hits = 0;
my @removed_lines;

sub do_search {
    for my $search_file_def (@search_file_defs) {
	my($filename, $encoding);
	if (ref $search_file_def) {
	    ($filename, $encoding) = @{$search_file_def}{qw(filename encoding)};
	} else {
	    $filename = $search_file_def;
	}
	debug "  $filename...";
	if (!defined $encoding) {
	    my $dir = Strassen->get_global_directives($filename); # XXX can this throw an exception?
	    $encoding = $dir->{encoding}->[0] || 'iso-8859-1';
	}
	my $local_hits = 0;
	open my $fh, $filename
	    or do {
		warn "ERROR: Can't open $filename ($!), skipping...\n";
		$errors++;
		next;
	    };
	binmode $fh, ":encoding($encoding)";
	my $outfile = defined $reldir ? File::Spec->abs2rel($filename, $reldir) : $filename;
	while(<$fh>) {
	    if ($_ =~ $search_rx) {
		chomp;
		my $out = "$outfile:";
		if ($with_line_number) {
		    $out .= "$.:";
		}
		$out .= "$_\n";
		if (/^#\s*REMOVED/) {
		    push @removed_lines, $out;
		} else {
		    print $out;
		}
		$local_hits++;
		last if defined $limit && $local_hits + $hits >= $limit; # limit this file
	    }
	}

	if ($local_hits) {
	    $file_hits++;
	    $hits += $local_hits;
	    last if defined $limit && $hits >= $limit; # limit all files
	}
    }
}

do_search();

if (@removed_lines) {
    print @removed_lines;
}

if ($debug) {
    debug "\nStatistics:";
    debug "  Hits:               $hits";
    debug "  File hits:          $file_hits";
    debug "  Removed lines hits: " . scalar(@removed_lines);
}

if ($errors) {
    exit 2;
} elsif (!$hits) {
    exit 1;
} else {
    exit 0;
}

__END__

=head1 NAME

bbbike-grep - specialized grep for bbbike data

=head1 SYNOPSIS

    bbbike-grep [--rx|--fixed] [--case-sensitive] [-n] [--add-file file] [--add-file-with-encoding file:encoding] [--debug] searchterm

=head1 DESCRIPTION

A commandline tool for searching in BBBike data files. It's modelled
after traditional L<grep(1)>, but with some differences:

=over

=item * By default it searches in BBBike data files, in the same
repository as C<bbbike-grep> itself. It's possible to add further
files for search (see L</--add-file> and L</--add-file-with-encoding>).

=item * It knows about the encoding of BBBike data files, and
automatically switches between C<iso-8859-1>, C<utf-8>, or whatever is
specified. It also knows the encoding of the current terminal, and
handles input parameters and output correctly.

=item * Regexps (like traditional grep) or fixed strings (like fgrep)
may be used. The default is "fixed", unlike grep.

=item * By default the search is done in a case insenitive way (unlike
grep).

=item * Lines beginning with a "REMOVED" comment will be listed at the end.

=back

=head2 OPTIONS

=over

=item C<--rx> (aliases: C<--regex>, C<--regexp>)

Specify that search term should be treated as a Perl regular
expression, similar like C<grep -P>.

=item C<--fixed>

Specify that search term should be treated as a fixed string, similar
like L<fgrep(1)>. This is the default.

=item C<--case-sensitive> (aliases: C<--case>, C<-I>)

Specify that the search term should be used in a case sensitive way.
By default it is case insensitive. Note that this differs from
traditional L<grep(1)>.

=item C<-n> (alias: C<--line-number>)

Output also line number of search hits after the filename. Useful for
editors and IDEs, e.g. for emacs' grep-mode.

=item C<--add-file I<filename>>

Specify another bbd file to search, additionally to the standard set
of files.

=item C<--add-file-with-encoding I<filename>:I<encoding>>

Specify another possibly non-bbd file to search, together with an
encoding like C<utf-8> or C<iso-8859-1>, additionally to the standard
set of files.

=item C<--debug>

Enable debug mode.

=back

=head1 EXAMPLES

    bbbike-grep "brandenburger tor"

=head1 SEE ALSO

L<grep(1)>, L<fgrep(1)>, L<Strassen::Core>.

=cut
